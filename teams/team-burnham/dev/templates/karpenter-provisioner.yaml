apiVersion: karpenter.sh/v1alpha5
kind: Provisioner
metadata:
  name: burnham
spec:
  requirements:
    # - key: 'node.kubernetes.io/instance-type'
    #   operator: In
    #   values: ['m5.xlarge', 'm5a.xlarge', 'm5ad.xlarge', 'm5d.xlarge', 't2.xlarge', 't3.xlarge', 't3a.xlarge']
    - key: 'kubernetes.io/arch'
      operator: In
      values: ['amd64']
    - key: karpenter.sh/capacity-type
      operator: In
      values: ['on-demand', 'spot']
  provider:
    apiVersion: extensions.karpenter.sh/v1alpha1
    kind: AWS
    instanceProfile: {{ .Values.spec.karpenterInstanceProfile }}
    securityGroupSelector:
      kubernetes.io/cluster/{{ .Values.spec.clusterName }}: '*'
      #aws:eks:cluster-name: '{{ .Values.spec.clusterName }}'
    subnetSelector:
      kubernetes.io/cluster/{{ .Values.spec.clusterName }}: '*'
      #aws:cloudformation:stack-name: '{{ .Values.spec.clusterName }}'
    tags:
      karpenter.sh/cluster_name: {{ .Values.spec.clusterName }}
      karpenter.sh/provisioner: burnham
  ttlSecondsAfterEmpty: 0
  limits:
    resources:
      cpu: '200'
  labels:
    billing-team: burnham
    team: burnham
    type: karpenter
  taints:
  - key: burnham
    value: 'true'
    effect: NoSchedule
---
apiVersion: karpenter.sh/v1alpha5
kind: Provisioner
metadata:
  name: default
spec:
  requirements:
    # - key: 'node.kubernetes.io/instance-type'
    #   operator: In
    #   values: ['m5.xlarge', 'm5a.xlarge', 'm5ad.xlarge', 'm5d.xlarge', 't2.xlarge', 't3.xlarge', 't3a.xlarge']
    - key: 'kubernetes.io/arch'
      operator: In
      values: ['amd64']
    - key: karpenter.sh/capacity-type
      operator: In
      values: ['on-demand', 'spot']
  provider:
    apiVersion: extensions.karpenter.sh/v1alpha1
    kind: AWS
    #instanceProfile: {{ .Values.spec.karpenterInstanceProfile }}
    instanceProfile: {{ .Values.spec.clusterName }}-managed-ondemand
    securityGroupSelector:
      #kubernetes.io/cluster/demo: '*'
      #kubernetes.io/cluster/{{ .Values.spec.clusterName }}: '*'      
      #aws:eks:cluster-name: '${eks-cluster-id}' # Choose only security groups of nodes
      aws:eks:cluster-name: '{{ .Values.spec.clusterName }}' # Choose only security groups of nodes      
    subnetSelector:
      kubernetes.io/cluster/{{ .Values.spec.clusterName }}: '*'    
      #kubernetes.io/cluster/${eks-cluster-id}: '*'
      kubernetes.io/role/internal-elb: '1' # to select only private subnets
    tags:
      #karpenter.sh/cluster_name: ${eks-cluster-id}
      karpenter.sh/cluster_name: {{ .Values.spec.clusterName }}      
      karpenter.sh/provisioner: default
  ttlSecondsAfterEmpty: 60
  limits:
    resources:
      cpu: '200'
  labels:
    billing-team: default
    team: default
    type: karpenter
  # taints:
  #   - key: karpenter
  #     value: 'true'
  #     effect: NoSchedule
